rez[rez==0] <- NA
rez
}
complete_manquant <- function(x) {
x[is.na(x)] <- as.integer(mean(x, na.rm = TRUE))
x
}
# Deces nettoyes
db_clean <- db %>%
mutate(
naissance_annee = nettoyer_partie_date(naissance_date, 1, 4),
# si absent, prendre l'age moyen
naissance_annee_complete = complete_manquant(naissance_annee),
naissance_mois = nettoyer_partie_date(naissance_date, 5, 6),
naissance_mois_complete = complete_manquant(naissance_mois),
naissance_jour = nettoyer_partie_date(naissance_date, 7, 8),
naissance_jour_complete = complete_manquant(naissance_jour),
naissance_date_brute = naissance_date,
naissance_date = as.Date(naissance_date, '%Y%m%d'),
naissance_date_complete = as.Date(paste0(naissance_annee_complete, '-', naissance_mois_complete, '-', naissance_jour_complete)),
deces_annee = nettoyer_partie_date(deces_date, 1, 4),
# si absent, prendre l'age moyen
deces_annee_complete = complete_manquant(deces_annee),
deces_mois = nettoyer_partie_date(deces_date, 5, 6),
deces_mois_complete = complete_manquant(deces_mois),
deces_jour = nettoyer_partie_date(deces_date, 7, 8),
deces_jour_complete = complete_manquant(deces_jour),
deces_date = as.Date(deces_date, '%Y%m%d'),
deces_date_complete = as.Date(paste0(deces_annee_complete, '-', deces_mois_complete, '-', deces_jour_complete))
)
# Afficher quelques verifications sur la base nettoyees
sum(is.na(db_clean$naissance_annee))
sum(is.na(db_clean$naissance_mois))
sum(is.na(db_clean$naissance_jour))
any(is.na(db_clean$naissance_date_complete))
any(is.na(db_clean$deces_date_complete))
#
# Identifier le département FR en fonction du code lieu
#
url_nomenclatures <- 'https://www.insee.fr/fr/statistiques/fichier/4316069/cog_ensemble_2020_csv.zip'
if (!file.exists(file.path(dossier_donnees_externes, basename(url_nomenclatures)))) {
# Le fichier n'existe pas
# Télécharger le fichier
zip_nomenclatures_insee <- dl_fichier('https://www.insee.fr/fr/statistiques/fichier/4316069/cog_ensemble_2020_csv.zip')
list_fichiers <- unzip(zip_nomenclatures_insee, exdir = 'inst/extdata')
}
# Lire les fichiers
communes <- read_csv('inst/extdata/communes2020.csv')
departements <- read_csv('inst/extdata/departement2020.csv')
regions <- read_csv('inst/extdata/region2020.csv')
pays <- read_csv('inst/extdata/pays2020.csv')
# Verifier s'il y a des doublons
#any(duplicated(communes$com))
# Préparer une base de commune sans doublon sur com (en prenant la première occurence)
communes_deduplique <- communes %>% filter(!duplicated(com))
#verifier qu'il n'y a plus de doublons
any(duplicated(communes$com[communes$typecom == 'COM']))
#
dbp <- db_clean %>%
left_join(
communes_deduplique %>%
transmute(
deces_code_lieu = com,
deces_region = as.character(reg),
deces_dep = dep,
deces_commune_libelle = libelle
)
) %>%
left_join(
departements %>%
select(
deces_dep = dep,
deces_dep_libelle = libelle
)
) %>%
left_join(regions %>% select(deces_region = reg, deces_region_libelle = libelle)) %>%
left_join(
pays %>%
filter(actual == 1) %>%
select(
deces_code_lieu = cog, deces_pays = libcog))
# verifier le nombre de NA
sum(is.na(dbp$deces_code_lieu))
sum(is.na(dbp$deces_dep))
# Afficher le nombre de deces par code_lieu et pays
dbp %>% filter(is.na(deces_dep)) %>%
select(naissance_commune,
deces_code_lieu,
deces_pays) %>%
group_by(deces_code_lieu,
deces_pays) %>%
summarise(n = n()) %>%
arrange(desc(n))
# Afficher les deces à Tahiti
dbp %>% filter(deces_code_lieu == '98736')
# Il manque encore les COM
# Ceci devrait suffire pour notre pyramide des ages en france (hors COM)
db_clean <- db_clean %>% mutate(deces_departement = str_sub(deces_code_lieu,1,2))
db_clean <- db_clean %>% mutate(age_deces_millesime = deces_annee_complete - naissance_annee_complete)
saveRDS(db_clean, file = 'gen/rds/fr_gouv_registre_deces_fr.rds')
db_clean <- readRDS('gen/rds/fr_gouv_registre_deces_fr.rds')
# Deces par jour et par departement depuis 01/01/2018
deces_dep_jour <- db_clean %>%
group_by(deces_date_complete,
deces_departement) %>%
summarise(effectif=n()) %>%
filter(deces_date_complete >= "2018-01-01")
deces_dep_centre_reduit <- deces_dep_jour %>%
group_by(deces_departement) %>%
summarise(minimum = min(effectif),
maximum = max(effectif),
moyenne = mean(effectif),
premier_quartile = quantile(effectif,
probs=0.25),
dernier_quartile = quantile(effectif,
probs=(0.75)))
deces_dep_jour <- deces_dep_jour %>% left_join(deces_dep_centre_reduit)
# Ajouter la colonne dece_centre_reduit
deces_dep_jour <- deces_dep_jour %>% mutate(dece_centre_reduit = (effectif-moyenne)/max(dernier_quartile - moyenne,
moyenne - premier_quartile))
# Lire le fichier des departements-regions
nom_departement <- read.csv("data/csv/departements-region.csv",sep=",",header = TRUE,encoding="UTF-8")
deces_dep_jour <- deces_dep_jour %>% left_join(nom_departement,
# BUG = ?
by=c("deces_departement"="num_dep"))
# Ajouter la colonne confinement
deces_dep_jour <- deces_dep_jour %>%
mutate(confinement = if_else(
(deces_date_complete >= "2020-03-17" & deces_date_complete <= "2020-05-11") |
(deces_date_complete >= "2020-10-30" & deces_date_complete <= "2020-12-15"),
"confinement",
"pas de confinement"))
# Filtrer les deces par region
BourgogneFrancheComté <-deces_dep_jour %>%filter(region_name=="Bourgogne-Franche-Comté")
AuvergneRhôneAlpes<-deces_dep_jour %>%filter(region_name=="Auvergne-Rhône-Alpes")
ÎledeFrance <-deces_dep_jour %>%filter(region_name=="Île-de-France")
PaysdelaLoire <-deces_dep_jour %>%filter(region_name=="Pays de la Loire")
Normandie <-deces_dep_jour %>%filter(region_name=="Normandie")
NouvelleAquitaine <-deces_dep_jour %>%filter(region_name=="Nouvelle-Aquitaine")
HautsdeFrance <-deces_dep_jour %>%filter(region_name=="Hauts-de-France")
Occitanie <-deces_dep_jour %>%filter(region_name=="Occitanie")
PACA <-deces_dep_jour %>%filter(region_name=="Provence-Alpes-Côte d'Azur")
GrandEst <-deces_dep_jour %>%filter(region_name=="Grand Est")
Bretagne<-deces_dep_jour %>%filter(region_name=="Bretagne")
Corse<-deces_dep_jour %>%filter(region_name=="Corse")
CentreValdeLoire<-deces_dep_jour %>%filter(region_name=="Centre-Val de Loire")
ggplot(data = BourgogneFrancheComté) +
geom_line(aes(x=deces_date_complete,
y = dece_centre_reduit,
colour=confinement)) +
scale_colour_manual(values=c("red","black"))+
facet_wrap(~dep_name)+
ggtitle("Décès quotidiens par département") +
xlab("date de décès") +
ylab("nombre de décès (centrés et réduits au quartile)")
dev.print(device = png, file = "gen/images/fr_gouv_Registre_Deces_quotidiens_BourgogneFrancheComté.png", width = 1000)
ggplot(data = AuvergneRhôneAlpes) +
geom_line(aes(x=deces_date_complete, y = dece_centre_reduit,colour=confinement)) +
scale_colour_manual(values=c("red","black"))+
facet_wrap(~dep_name)+
ggtitle("Décès quotidiens par département") +
xlab("date de décès") + ylab("nombre de décès (centrés et réduits au quartile)")
dev.print(device = png, file = "gen/images/fr_gouv_Registre_Deces_quotidiens_AuvergneRhôneAlpes.png", width = 1000)
ggplot(data = PaysdelaLoire) +
geom_line(aes(x=deces_date_complete, y = dece_centre_reduit,colour=confinement)) +
scale_colour_manual(values=c("red","black"))+
facet_wrap(~dep_name)+
ggtitle("Décès quotidiens par département") +
xlab("date de décès") + ylab("nombre de décès (centrés et réduits au quartile)")
dev.print(device = png, file = "gen/images/fr_gouv_Registre_Deces_quotidiens_PaysdelaLoire.png", width = 1000)
ggplot(data = PACA) +
geom_line(aes(x=deces_date_complete, y = dece_centre_reduit,colour=confinement)) +
scale_colour_manual(values=c("red","black"))+
facet_wrap(~dep_name)+
ggtitle("Décès quotidiens par département") +
xlab("date de décès") + ylab("nombre de décès (centrés et réduits au quartile)")
dev.print(device = png, file = "gen/images/fr_gouv_Registre_Deces_quotidiens_PACA.png", width = 1000)
ggplot(data = ÎledeFrance) +
geom_line(aes(x=deces_date_complete, y = dece_centre_reduit,colour=confinement)) +
scale_colour_manual(values=c("red","black"))+
facet_wrap(~dep_name)+
ggtitle("Décès quotidiens par département") +
xlab("date de décès") + ylab("nombre de décès (centrés et réduits au quartile)")
dev.print(device = png, file = "gen/images/fr_gouv_Registre_Deces_quotidiens_ÎledeFrance.png", width = 1000)
ggplot(data = NouvelleAquitaine) +
geom_line(aes(x=deces_date_complete, y = dece_centre_reduit,colour=confinement)) +
scale_colour_manual(values=c("red","black"))+
facet_wrap(~dep_name)+
ggtitle("Décès quotidiens par département") +
xlab("date de décès") + ylab("nombre de décès (centrés et réduits au quartile)")
dev.print(device = png, file = "gen/images/fr_gouv_Registre_Deces_quotidiens_NouvelleAquitaine.png", width = 1000)
ggplot(data = HautsdeFrance) +
geom_line(aes(x=deces_date_complete, y = dece_centre_reduit,colour=confinement)) +
scale_colour_manual(values=c("red","black"))+
facet_wrap(~dep_name)+
ggtitle("Décès quotidiens par département") +
xlab("date de décès") + ylab("nombre de décès (centrés et réduits au quartile)")
dev.print(device = png, file = "gen/images/fr_gouv_Registre_Deces_quotidiens_HautsdeFrance.png", width = 1000)
ggplot(data = GrandEst) +
geom_line(aes(x=deces_date_complete, y = dece_centre_reduit,colour=confinement)) +
scale_colour_manual(values=c("red","black"))+
facet_wrap(~dep_name)+
ggtitle("Décès quotidiens par département") +
xlab("date de décès") + ylab("nombre de décès (centrés et réduits au quartile)")
dev.print(device = png, file = "gen/images/fr_gouv_Registre_Deces_quotidiens_GrandEst.png", width = 1000)
ggplot(data = Occitanie) +
geom_line(aes(x=deces_date_complete, y = dece_centre_reduit,colour=confinement)) +
scale_colour_manual(values=c("red","black"))+
facet_wrap(~dep_name)+
ggtitle("Décès quotidiens par département") +
xlab("date de décès") + ylab("nombre de décès (centrés et réduits au quartile)")
dev.print(device = png, file = "gen/images/fr_gouv_Registre_Deces_quotidiens_Occitanie.png", width = 1000)
ggplot(data = Corse) +
geom_line(aes(x=deces_date_complete, y = dece_centre_reduit,colour=confinement)) +
scale_colour_manual(values=c("red","black"))+
facet_wrap(~dep_name)+
ggtitle("Décès quotidiens par département") +
xlab("date de décès") + ylab("nombre de décès (centrés et réduits au quartile)")
dev.print(device = png, file = "gen/images/fr_gouv_Registre_Deces_quotidiens_Corse.png", width = 1000)
ggplot(data = Bretagne) +
geom_line(aes(x=deces_date_complete, y = dece_centre_reduit,colour=confinement)) +
scale_colour_manual(values=c("red","black"))+
facet_wrap(~dep_name)+
ggtitle("Décès quotidiens par département") +
xlab("date de décès") + ylab("nombre de décès (centrés et réduits au quartile)")
dev.print(device = png, file = "gen/images/fr_gouv_Registre_Deces_quotidiens_Bretagne.png", width = 1000)
ggplot(data = CentreValdeLoire) +
geom_line(aes(x=deces_date_complete, y = dece_centre_reduit,colour=confinement)) +
scale_colour_manual(values=c("red","black"))+
facet_wrap(~dep_name)+
ggtitle("Décès quotidiens par département") +
xlab("date de décès") + ylab("nombre de décès (centrés et réduits au quartile)")
dev.print(device = png, file = "gen/images/fr_gouv_Registre_Deces_quotidiens_CentreValdeLoire.png", width = 1000)
deces_age_jour <- db_clean %>%
group_by(deces_date_complete,
age_deces_millesime) %>%
summarise(effectif=n()) %>%
filter(deces_date_complete >= "2018-01-01")
deces_age_centre_reduit <- deces_age_jour %>%
group_by(age_deces_millesime) %>%
summarise(minimum = min(effectif),
maximum = max(effectif),
moyenne = mean(effectif),
premier_quartile = quantile(effectif,
probs=0.25),
dernier_quartile = quantile(effectif,
probs=(0.75)))
deces_age_jour <- deces_age_jour %>% left_join(deces_age_centre_reduit)
deces_0_an <- deces_age_jour %>% filter(age_deces_millesime==0)
ggplot(data = deces_0_an) +
geom_line(aes(x=deces_date_complete, y = dece_centre_reduit,colour=confinement)) +
scale_colour_manual(values=c("red","black"))+
facet_wrap(~dep_name)+
ggtitle("Décès quotidiens par age") +
xlab("date de décès") + ylab("nombre de décès (centrés et réduits au quartile)")
ggplot(data = deces_0_an) +
geom_line(aes(x=deces_date_complete, y = dece_centre_reduit,colour=confinement)) +
scale_colour_manual(values=c("red","black"))+
ggtitle("Décès quotidiens par age") +
xlab("date de décès") + ylab("nombre de décès (centrés et réduits au quartile)")
deces_age_jour <- deces_age_jour %>% mutate(dece_centre_reduit = (effectif-moyenne)/max(dernier_quartile - moyenne,
moyenne - premier_quartile))
deces_0_an <- deces_age_jour %>% filter(age_deces_millesime==0)
ggplot(data = deces_0_an) +
geom_line(aes(x=deces_date_complete, y = dece_centre_reduit,colour=confinement)) +
scale_colour_manual(values=c("red","black"))+
ggtitle("Décès quotidiens par age") +
xlab("date de décès") + ylab("nombre de décès (centrés et réduits au quartile)")
ggplot(data = deces_0_an) +
geom_line(aes(x=deces_date_complete, y = dece_centre_reduit)) +
scale_colour_manual(values=c("red","black"))+
ggtitle("Décès quotidiens par age") +
xlab("date de décès") + ylab("nombre de décès (centrés et réduits au quartile)")
deces_age_jour <- db_clean %>%
group_by(deces_date_complete,
age_deces_millesime) %>%
summarise(effectif=n()) %>%
filter(deces_date_complete >= "2018-01-01")
# Ajouter la colonne confinement
deces_age_jour <- deces_age_jour %>%
mutate(confinement = if_else(
(deces_date_complete >= "2020-03-17" & deces_date_complete <= "2020-05-11") |
(deces_date_complete >= "2020-10-30" & deces_date_complete <= "2020-12-15"),
"confinement",
"pas de confinement"))
deces_0_an <- deces_age_jour %>% filter(age_deces_millesime==0)
ggplot(data = deces_0_an) +
geom_line(aes(x=deces_date_complete, y = effectif,colour=confinement)) +
scale_colour_manual(values=c("red","black"))+
ggtitle("Décès quotidiens par age") +
xlab("date de décès") + ylab("nombre de décès (centrés et réduits au quartile)")
deces_age_jour <- deces_age_jour %>%
mutate(tranche_d_age = case_when(age_deces_millesime < 20 ~ "0-19ans",
age_deces_millesime > 19 && age_deces_millesime < 40 ~"20-39 ans",
age_deces_millesime > 39 && age_deces_millesime < 60 ~"40-59 ans",
age_deces_millesime > 59 && age_deces_millesime < 80 ~"60-79 ans",
age_deces_millesime > 79  ~"plus de 89ans"))
ggplot(data = deces_age_jour) +
geom_line(aes(x=deces_date_complete, y = effectif,colour=confinement)) +
scale_colour_manual(values=c("red","black"))+
facet_wrap(~tranche_d_age)+
ggtitle("Décès quotidiens par age") +
xlab("date de décès") + ylab("nombre de décès (centrés et réduits au quartile)")
deces_age_jour <- deces_age_jour %>%
mutate(tranche_d_age = case_when(age_deces_millesime < 20 ~ "0-19ans",
age_deces_millesime > 19 & age_deces_millesime < 40 ~"20-39 ans",
age_deces_millesime > 39 & age_deces_millesime < 60 ~"40-59 ans",
age_deces_millesime > 59 & age_deces_millesime < 80 ~"60-79 ans",
age_deces_millesime > 79  ~"plus de 89ans"))
ggplot(data = deces_age_jour) +
geom_line(aes(x=deces_date_complete, y = effectif,colour=confinement)) +
scale_colour_manual(values=c("red","black"))+
facet_wrap(~tranche_d_age)+
ggtitle("Décès quotidiens par age") +
xlab("date de décès") + ylab("nombre de décès (centrés et réduits au quartile)")
deces_tranchedage_jour <- deces_age_jour %>%
group_by(deces_date_complete,
tranche_d_age) %>%
summarise(effectif=sum(effectif))
ggplot(data = deces_tranchedage_jour) +
geom_line(aes(x=deces_date_complete, y = effectif,colour=confinement)) +
scale_colour_manual(values=c("red","black"))+
facet_wrap(~tranche_d_age)+
ggtitle("Décès quotidiens par age") +
xlab("date de décès") + ylab("nombre de décès (centrés et réduits au quartile)")
# Ajouter la colonne confinement
deces_tranchedage_jour <- deces_tranchedage_jour %>%
mutate(confinement = if_else(
(deces_date_complete >= "2020-03-17" & deces_date_complete <= "2020-05-11") |
(deces_date_complete >= "2020-10-30" & deces_date_complete <= "2020-12-15"),
"confinement",
"pas de confinement"))
ggplot(data = deces_tranchedage_jour) +
geom_line(aes(x=deces_date_complete, y = effectif,colour=confinement)) +
scale_colour_manual(values=c("red","black"))+
facet_wrap(~tranche_d_age)+
ggtitle("Décès quotidiens par age") +
xlab("date de décès") + ylab("nombre de décès (centrés et réduits au quartile)")
deces_tranchedage_centre_reduit <- deces_tranchedage_jour %>%
group_by(tranche_d_age) %>%
summarise(minimum = min(effectif),
maximum = max(effectif),
moyenne = mean(effectif),
premier_quartile = quantile(effectif,
probs=0.25),
dernier_quartile = quantile(effectif,
probs=(0.75)))
deces_tranchedage_jour <- deces_tranchedage_jour %>% left_join(deces_tranchedage_centre_reduit)
deces_tranchedage_jour <- deces_tranchedage_jour %>% mutate(deces_tranchedage_centre_reduit = (effectif-moyenne)/max(dernier_quartile - moyenne,
moyenne - premier_quartile))
ggplot(data = deces_tranchedage_jour) +
geom_line(aes(x=deces_date_complete, y = deces_tranchedage_centre_reduit,colour=confinement)) +
scale_colour_manual(values=c("red","black"))+
facet_wrap(~tranche_d_age)+
ggtitle("Décès quotidiens par age") +
xlab("date de décès") + ylab("nombre de décès (centrés et réduits au quartile)")
ggplot(data = deces_tranchedage_jour %>% fiter(tranche_d_age=="40-59 ans")) +
geom_line(aes(x=deces_date_complete, y = deces_tranchedage_centre_reduit,colour=confinement)) +
scale_colour_manual(values=c("red","black"))+
facet_wrap(~tranche_d_age)+
ggtitle("Décès quotidiens par age") +
xlab("date de décès") + ylab("nombre de décès (centrés et réduits au quartile)")
ggplot(data = deces_tranchedage_jour %>% filter(tranche_d_age=="40-59 ans")) +
geom_line(aes(x=deces_date_complete, y = deces_tranchedage_centre_reduit,colour=confinement)) +
scale_colour_manual(values=c("red","black"))+
facet_wrap(~tranche_d_age)+
ggtitle("Décès quotidiens par age") +
xlab("date de décès") + ylab("nombre de décès (centrés et réduits au quartile)")
ggplot(data = deces_tranchedage_jour %>% filter(tranche_d_age=="20-39 ans")) +
geom_line(aes(x=deces_date_complete, y = deces_tranchedage_centre_reduit,colour=confinement)) +
scale_colour_manual(values=c("red","black"))+
facet_wrap(~tranche_d_age)+
ggtitle("Décès quotidiens par age") +
xlab("date de décès") + ylab("nombre de décès (centrés et réduits au quartile)")
ggplot(data = deces_tranchedage_jour %>% filter(tranche_d_age=="0-19ans")) +
geom_line(aes(x=deces_date_complete, y = deces_tranchedage_centre_reduit,colour=confinement)) +
scale_colour_manual(values=c("red","black"))+
facet_wrap(~tranche_d_age)+
ggtitle("Décès quotidiens par age") +
xlab("date de décès") + ylab("nombre de décès (centrés et réduits au quartile)")
ggplot(data = deces_tranchedage_jour %>% filter(tranche_d_age=="40-59 ans")) +
geom_line(aes(x=deces_date_complete, y = deces_tranchedage_centre_reduit,colour=confinement)) +
scale_colour_manual(values=c("red","black"))+
facet_wrap(~tranche_d_age)+
ggtitle("Décès quotidiens par age") +
xlab("date de décès") + ylab("nombre de décès (centrés et réduits au quartile)")
deces_standard_pays_semaine<-readRDS("gen/rds/Eurostat_owid_deces_standard_pays_semaine.RDS")
deces_standard_pays_semaine<-deces_standard_pays_semaine %>%
mutate(deces_hors_covid=deces_tot-new_deaths)
deces_standard_pays_semaine<-deces_standard_pays_semaine %>%
mutate(part_deces_covid=new_deaths/deces_tot)
IC_deces <- deces_standard_pays_semaine %>% group_by(geo) %>%
summarise(moyenne=mean(deces_standard_tot),variance=sd(deces_standard_tot)) %>%
mutate(bsup = moyenne + 2*variance, binf = moyenne - 2*variance )
deces_standard_pays_semaine <- left_join(deces_standard_pays_semaine,IC_deces)
deces_standard_pays_semaine <- deces_standard_pays_semaine %>%
mutate(surmortalite = case_when(deces_standard_tot<=binf~"sous-mortalite",
deces_standard_tot>=bsup~"surmortalite",
TRUE~"mortalite normale"))
deces_standard_pays_semaine <- deces_standard_pays_semaine %>%
mutate(valeur_surmortalite = case_when(surmortalite=="sous-mortalite"~deces_standard_tot-binf,
surmortalite=="surmortalite"~deces_standard_tot-bsup,
TRUE~0)) %>%
mutate(part_surmortalite = valeur_surmortalite/deces_standard_tot*100) %>%
mutate(ecart_moyenne = (deces_standard_tot-moyenne)/moyenne*100)
test <- deces_standard_pays_semaine %>% mutate (numerosemaine=numerosemaine + 1,
deces_standard_tot_prec = deces_standard_tot,
new_deaths_prec=new_deaths,
deces_tot_prec =deces_tot,
new_cases_prec = new_cases,
new_vaccinations_prec=new_vaccinations,
Response_measure_prec = Response_measure,
#21
surmortalite_prec = surmortalite) %>%
select(geo, numerosemaine, deces_standard_tot_prec, new_deaths_prec, deces_tot_prec, new_cases_prec, new_vaccinations_prec, Response_measure_prec, surmortalite_prec)
deces_standard_pays_semaine <-left_join(deces_standard_pays_semaine ,test)
deces_standard_pays_semaine<-deces_standard_pays_semaine %>%
mutate(deces_tot_var = deces_tot - deces_tot_prec,
deces_standard_tot_var = deces_standard_tot - deces_standard_tot_prec,
new_deaths_var = new_deaths - new_deaths_prec,
new_cases_var = new_cases - new_cases_prec,
new_vaccinations_var = new_vaccinations - new_vaccinations_prec)
#---------------------------------------#
####     analyse glissante           ####
#---------------------------------------#
autriche <- deces_standard_pays_semaine %>% filter(geo =="AT")
belgique <- deces_standard_pays_semaine %>% filter(geo =="BE")
bulgarie <- deces_standard_pays_semaine %>% filter(geo =="BG")
suisse <- deces_standard_pays_semaine %>% filter(geo =="CH")
rtcheque <- deces_standard_pays_semaine %>% filter(geo =="CZ")
danmark<- deces_standard_pays_semaine %>% filter(geo =="DK")
estonie<- deces_standard_pays_semaine %>% filter(geo =="EE")
espagne<- deces_standard_pays_semaine %>% filter(geo =="ES")
france <- deces_standard_pays_semaine %>% filter(geo =="FR")
croatie <- deces_standard_pays_semaine %>% filter(geo =="HR") %>% filter(numerosemaine>52)
hongrie <- deces_standard_pays_semaine %>% filter(geo =="HU")
islande <- deces_standard_pays_semaine %>% filter(geo =="IS")
italie <- deces_standard_pays_semaine %>% filter(geo =="IT")
lichtenstein <- deces_standard_pays_semaine %>% filter(geo =="LI")
lituanie <- deces_standard_pays_semaine %>% filter(geo =="LT")
luxembourg <- deces_standard_pays_semaine %>% filter(geo =="LU")
lettonie <- deces_standard_pays_semaine %>% filter(geo =="LV")
montenegro <- deces_standard_pays_semaine %>% filter(geo =="ME")
malte<- deces_standard_pays_semaine %>% filter(geo =="MT")
norvege<- deces_standard_pays_semaine %>% filter(geo =="NO")
paysbas<- deces_standard_pays_semaine %>% filter(geo =="NL")
portugal <- deces_standard_pays_semaine %>% filter(geo =="PT")
pologne <- deces_standard_pays_semaine %>% filter(geo =="PL")
serbie <- deces_standard_pays_semaine %>% filter(geo =="RS")
suede <- deces_standard_pays_semaine %>% filter(geo =="SE")
slovenie <- deces_standard_pays_semaine %>% filter(geo =="SI")
slovaquie <- deces_standard_pays_semaine %>% filter(geo =="SK")
allemagne<- deces_standard_pays_semaine %>% filter(geo =="DE")
chypre<- deces_standard_pays_semaine %>% filter(geo =="CY")
albanie<- deces_standard_pays_semaine %>% filter(geo =="AL")
armenie<- deces_standard_pays_semaine %>% filter(geo =="AM")
grece<- deces_standard_pays_semaine %>% filter(geo =="EL")
finlande<- deces_standard_pays_semaine %>% filter(geo =="FI")
roumanie<- deces_standard_pays_semaine %>% filter(geo =="RO")
#France
moyenne_mobile <- running_mean(france$deces_standard_tot, 52)
moyenne <- mean(moyenne_mobile)
moyenne_mobile<- data_frame(moyenne_mobile)
moyenne_mobile$numerosemaine<-1:nrow(moyenne_mobile)+51
france <- france %>% left_join(moyenne_mobile)
france$moyenne <- moyenne
plot(france$numerosemaine, france$deces_standard20france_plus_40, pch=16,cex=0, axes=F, ylim=c(0,25000), xlab="", ylab="", type="o",col="black", main="Décès hebdomadaires standardisés")
axis(2, ylim=c(0,60000),col="black")
mtext("nombre de décès toutes causes des plus de 40 ans",side=2,line=3)
mtext("                                                                   Source : Eurostat décès hebdomadaires et population",side=1,col="black",line=2.5)
abline(v=c(53,105,158,210,262,314,366,419), col="blue",lty=3)
text(26,1000,"2013",cex=1.2)
text(78,1000,"2014",cex=1.2)
text(130,1000,"2015",cex=1.2)
text(183,1000,"2016",cex=1.2)
text(235,1000,"2017",cex=1.2)
text(287,1000,"2018",cex=1.2)
text(339,1000,"2019",cex=1.2)
text(391,1000,"2020",cex=1.2)
text(440,1000,"2021",cex=1.2)
text(26,22000,"FRANCE",cex=1.2)
dev.print(device = png, file = "gen/images/Eurostat_owid_Deces_Pays_Hebdo_france.png", width = 1000)
moyenne_mobile <- running_mean(deces_tranchedage_jour$effectif, 7)
moyenne <- mean(moyenne_mobile)
moyenne_mobile<- data_frame(moyenne_mobile)
dc4059ans <- deces_tranchedage_jour %>% filter(tranche_d_age=="40-59 ans")
moyenne_mobile <- running_mean(dc4059ans$effectif, 7)
moyenne <- mean(moyenne_mobile)
moyenne_mobile<- data_frame(moyenne_mobile)
moyenne_mobile$deces_date_complete<-1:nrow(moyenne_mobile)+6
dc4059ans <- dc4059ans %>% left_join(moyenne_mobile)
dc4059ans$moyenne <- moyenne
dc4059ans <- dc4059ans %>% order(deces_date_complete)
dc4059ans <- deces_tranchedage_jour %>% filter(tranche_d_age=="40-59 ans")
dc4059ans <- dc4059ans %>% order(deces_date_complete)
dc4059ans <- dc4059ans[order(deces_date_complete)]
View(dc4059ans)
dc4059ans$numerojour<-1:nrow(dc4059ans)
moyenne_mobile$numerojour<-1:nrow(moyenne_mobile)+6
# Ajouter la moyenne mobile
moyenne_mobile <- running_mean(dc4059ans$effectif, 7)
moyenne <- mean(moyenne_mobile)
moyenne_mobile<- data_frame(moyenne_mobile)
moyenne_mobile$numerojour<-1:nrow(moyenne_mobile)+6
dc4059ans <- dc4059ans %>% left_join(moyenne_mobile)
dc4059ans$moyenne <- moyenne
ggplot(data = dc4059ans) +
geom_line(aes(x=deces_date_complete, y = moyenne_mobile,colour=confinement)) +
scale_colour_manual(values=c("red","black"))+
facet_wrap(~tranche_d_age)+
ggtitle("Décès quotidiens par age") +
xlab("date de décès") + ylab("nombre de décès (centrés et réduits au quartile)")
